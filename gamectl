#!/bin/bash

ulimit -SHn 51200

# define default configuration
POLL=true
SMP=auto
ERL_MAX_PORTS=32000
ERL_PROCESSES=500000
ERL_MAX_ETS_TABLES=14000

# define default environment variables
ERL=erl
COOKIE="cwww"
RUNAPP=world
ROOTDIR=`cd $(dirname $0); pwd`
WG_CONFIG_PATH=$ROOTDIR/etc/
WG_DB=$ROOTDIR/var/db/$RUNAPP
CTLAPP=mgee_ctl

#echo "root is $ROOTDIR \n"

# read custom configuration
#CONFIG=$ROOTDIR/etc/mgee.cfg
CONFIG=$ROOTDIR/config/run_1
CONFDIR=$ROOTDIR/config
#[ -f "$CONFIG" ] ||

# parse command line parameters
ARGS=
while [ $# -ne 0 ] ; do
    PARAM=$1
    shift
    case $PARAM in
        --) break ;;
        --config) WG_CONFIG_PATH=$1 ; shift ;;
        --ctl-config) CONFIG=$1 ; shift ;;
        --spool) WG_DB=$1 ; shift ;;
        *) ARGS="$ARGS $PARAM" ;;
    esac
done


RUNAPP="$RUNAPP"

#   +K $POLL  是否启用操作系统的poll机制

#    -smp $SMP   是否支持对称多处理

#    -hidden    隐藏节点
############################################################################################
#    +e $ERL_MAX_ETS_TABLES  设置ETS最大数量   erlang:system_info(ets_count). erlang:system_info(ets_limit).
#    Sets the maximum number of ETS tables.

#    +P $ERL_PROCESSES   设置此系统同时存在的最大进程数 erlang:system_info(process_count). erlang:system_info(process_limit).
#    Sets the maximum number of simultaneously existing processes
#    for this system if a Number is passed as value.

#    +Q ERL_MAX_PORTS   设置此系统同时打开的端口数量限制  erlang:system_info(port_count). erlang:system_info(port_limit).
#    Sets the maximum number of simultaneously existing ports
#    for this system if a Number is passed as value.

#    +t 10485760   设置虚拟机可以处理的最大原子数   erlang:system_info(atom_count). erlang:system_info(atom_limit).
#    Sets the maximum number of atoms the virtual machine can handle.

############################################################################################
#  +zdbbl 8192 端口buffer大小
#  Sets the distribution buffer busy limit (dist_buf_busy_limit) in kilobytes

#  +sbwt none|very_short|short|medium|long|very_long  调度器休眠机制
#  +swt very_hight | medium | low                     cpu唤醒时机
#  +swct very_eager|eager|medium|lazy|very_lazy       cpu频繁唤醒，增加cpu利用率

# sbwt 设置调度程序忙等待阈值   Sets scheduler busy wait    threshold
# swt  设置调度程序唤醒阈值     Sets scheduler wakeup       threshold
# swct 设置调度程序唤醒清理阈值 Sets scheduler wake cleanup threshold


#  +sbt db 绑定调度器，让cpu负载均衡，避免大量跃迁

#  +hms 8192  将进程的默认堆大小设置为Size
#  Sets the default                heap size of processes to the size Size

#  +hmbs 8192   将进程的默认二进制虚拟堆大小设置为大小size
#  Sets the default binary virtual heap size of processes to the size Size.

#  +fnu[{w|i|e}]
# 虚拟机使用文件名,就像使用UTF-8(或其他特定于系统的Unicode编码)对文件名进行编码一样
#  The virtual machine works with filenames as if
#  they are encoded using UTF-8 (or some other system-specific Unicode encoding).




ERLANG_OPTS="+K $POLL \
    -smp $SMP \
    +e $ERL_MAX_ETS_TABLES \
    +P $ERL_PROCESSES \
    -hidden  \
    +t 10485760 \
    +zdbbl 8192 \
    +sbwt very_short \
    +swt low \
    +swct very_lazy \
    +sbt db \
    +hms 8192 \
    +hmbs 8192 \
    +fnu  \
    -mnesia dir "\"$WG_DB\"" \
    -mnesia dump_log_write_threshold 100000 \
    -mnesia no_table_loaders 1000"

# define additional environment variables
BASE_EBIN=`dirname $ROOTDIR`/base/ebin
MOCHI_EBIN=`dirname $ROOTDIR`/mochiweb/ebin
CACLIB_EBIN=`dirname $ROOTDIR`/caclib/ebin
CVDEPS_EBIN=`dirname $ROOTDIR`/deps/*/ebin

ROOT_EBIN=$ROOTDIR/ebin

#EBINS="$BASE_EBIN $MOCHI_EBIN $CACLIB_EBIN $ROOT_EBIN"
EBINS="$BASE_EBIN $ROOT_EBIN"
#echo "ebins is " $EBINS



DATETIME=`date "+%Y%m%d-%H%M%S"`

#ERL_INETRC=$ROOTDIR/etc/inetrc
HOME=$ROOTDIR

# export global variables
export WG_CONFIG_PATH


#export ERL_INETRC
export ERL_MAX_PORTS
export ERL_MAX_ETS_TABLES
export HOME

[ -d $WG_DB ] || mkdir -p $WG_DB
[ -d $WG_CONFIG_PATH ] || mkdir -p $WG_CONFIG_PATH

# Compatibility in ZSH
#setopt shwordsplit 2>/dev/null


###===================================================================
### Func Begin
###===================================================================


###===================================================================
### Import File
source $ROOTDIR/scripts/cvCVI.sh
###===================================================================

# display ctl usage
usage ()
{
    echo ""
    echo "Commands to start an wg node:"
    echo "  start  [--no_caclib] Start an node in server mode, default use caclib"
    echo "  debug  Attach an interactive Erlang shell to a running node"
    echo "  live   Start an node in live (interactive) mode"
    echo ""
    echo "Optional parameters when starting an node:"
    echo "  --config file      Config file:             $WG_CONFIG_PATH"
    echo "  --ctl-config file  Config file of wgctl:    $CONFIG"
    echo "  --spool dir        Database spool dir:      $WG_DB"
    echo ""
}


# 获取game.conf中某个配置
game_conf_value() {
    KEY=$1
    if [ -n "$KEY" ]; then
        echo `cat $CONFDIR/game.conf | grep "${KEY}" | tail -n 1 | sed -e "s/\s*{${KEY},\s*\(.*\)}.*/\1/"`
    fi
}

# 获取ip
# 获取第一行网卡对应ip
get_ip() {
    GAME_IP=$(game_conf_value game_ip)
    GAME_IP=${GAME_IP#\"}
    GAME_IP=${GAME_IP%\"}
    echo ${GAME_IP}
}



# start server     -noinput -detached \
start ()
{
    ERLANG_NODE=${RUNAPP}@$HOST
    $ERL \
      $NAME_FLAG $ERLANG_NODE \
      -pa $EBINS \
      -setcookie $COOKIE \
      -kernel connect_all true \
      -config $CONFIG \
      -s ${RUNAPP} start \
      $ERLANG_OPTS $ARGS "$@"

}



###===================================================================
### Func End
###===================================================================

# 参数义
[ -z "$HOST" ] && HOST=$(get_ip)
#echo "Ip地址为:${HOST}"
if [ -z ${HOST} ]; then
    error "获取内网ip失败!"
fi
if [ "$HOST" == "localhost" ]; then
    NAME_FLAG=-sname
else
    NAME_FLAG=-name
fi


warn ${LINENO}":start start"
case ${ARGS} in
    ' start') start;;
    *) usage; exit 1;;
esac
